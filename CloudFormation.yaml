AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to deploy a complete AWS EKS cluster with custom VPC,
  public/private subnets, Internet Gateway, NAT Gateway, route tables,
  security groups, and a managed node group for a three-tier application.

Parameters:
  ClusterName:
    Type: String
    Default: three-tier-eks-cluster
    Description: Name of the EKS cluster.
  NodeGroupName:
    Type: String
    Default: app-node-group
    Description: Name of the EKS managed node group.
  NodeInstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for the EKS worker nodes.
  NodeDesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired number of EC2 instances in the EKS node group.
  NodeMinSize:
    Type: Number
    Default: 1
    Description: Minimum number of EC2 instances in the EKS node group.
  NodeMaxSize:
    Type: Number
    Default: 3
    Description: Maximum number of EC2 instances in the EKS node group.
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet 1.
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Public Subnet 2.
  PublicSubnet3CIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for Public Subnet 3.
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.101.0/24
    Description: CIDR block for Private Subnet 1.
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.102.0/24
    Description: CIDR block for Private Subnet 2.
  PrivateSubnet3CIDR:
    Type: String
    Default: 10.0.103.0/24
    Description: CIDR block for Private Subnet 3.
  KeyPairName:
    Type: String
    Default: "ashutosh" # Leave empty if you don't need SSH access to worker nodes
    Description: >
      (Optional) The name of an existing EC2 KeyPair to enable SSH access to the worker nodes.
      Leave empty if no SSH access is desired.

Conditions:
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, ""]]

Resources:

  # --- VPC and Networking ---

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-igw"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets (for NAT Gateway, Load Balancers)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-1"
        - Key: "kubernetes.io/role/elb"
          Value: "1" # Required tag for EKS to auto-discover ELB subnets

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-2"
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [2, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-3"
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  # Private Subnets (for EKS worker nodes and internal resources)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-subnet-1"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1" # Required tag for EKS to auto-discover internal ELB subnets
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned" # Required tag for EKS

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-subnet-2"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [2, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-subnet-3"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"

  # Route Tables and Associations
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway for Private Subnets Internet Access
  NatEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachInternetGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # NAT Gateway should be in a public subnet
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-nat-gateway"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-rt"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # --- Security Groups ---

  # Security Group for the EKS control plane (allows communication with worker nodes)
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster control plane communication.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow worker nodes to communicate with the EKS API server
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt EKSNodeSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-cluster-sg"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"

  # Security Group for EKS Worker Nodes
  EKSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS worker nodes.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !GetAtt EKSClusterSecurityGroup.GroupId
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !GetAtt EKSNodeSecurityGroup.GroupId
        - !If
          - HasKeyPair
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0 # Restrict this in production
          - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-node-sg"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"

  # --- IAM Roles ---

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-EKSClusterRole"

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-NodeGroupRole"

  # --- EKS Cluster ---

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: '1.27'
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup

  # --- EKS Managed Node Group ---

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      ScalingConfig:
        DesiredSize: !Ref NodeDesiredCapacity
        MinSize: !Ref NodeMinSize
        MaxSize: !Ref NodeMaxSize
      InstanceTypes:
        - !Ref NodeInstanceType
      AmiType: AL2_x86_64
      RemoteAccess:
        Ec2SshKey: !If [HasKeyPair, !Ref KeyPairName, !Ref "AWS::NoValue"]
        SourceSecurityGroups:
          - !Ref EKSNodeSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-nodegroup"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"

Outputs:
  ClusterName:
    Description: The name of the EKS cluster.
    Value: !Ref ClusterName
  ClusterEndpoint:
    Description: API Server endpoint URL for the EKS cluster.
    Value: !GetAtt EKSCluster.Endpoint
  ClusterSecurityGroupId:
    Description: Security Group ID for EKS Cluster.
    Value: !Ref EKSClusterSecurityGroup
  NodeGroupRoleArn:
    Description: ARN of the EKS Node Group IAM Role.
    Value: !GetAtt EKSNodeGroupRole.Arn
  VPCId:
    Description: VPC ID where the cluster is deployed.
    Value: !Ref VPC
  PublicSubnetIds:
    Description: List of Public Subnet IDs.
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
  PrivateSubnetIds:
    Description: List of Private Subnet IDs.
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]]
